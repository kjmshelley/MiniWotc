#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiniWOTC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MiniWotc")]
	public partial class eWotcDB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertTargetGroup(TargetGroup instance);
    partial void UpdateTargetGroup(TargetGroup instance);
    partial void DeleteTargetGroup(TargetGroup instance);
    partial void InsertEmployeeDocument(EmployeeDocument instance);
    partial void UpdateEmployeeDocument(EmployeeDocument instance);
    partial void DeleteEmployeeDocument(EmployeeDocument instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    #endregion
		
		public eWotcDB() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MiniWotcConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public eWotcDB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public eWotcDB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public eWotcDB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public eWotcDB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<TargetGroup> TargetGroups
		{
			get
			{
				return this.GetTable<TargetGroup>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeDocument> EmployeeDocuments
		{
			get
			{
				return this.GetTable<EmployeeDocument>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ssn;
		
		private string _name;
		
		private string _address;
		
		private string _state;
		
		private System.Nullable<int> _qualified_target_groups;
		
		private System.Nullable<int> _certified_target_group;
		
		private EntitySet<EmployeeDocument> _EmployeeDocuments;
		
		private EntityRef<TargetGroup> _TargetGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnssnChanging(string value);
    partial void OnssnChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void Onqualified_target_groupsChanging(System.Nullable<int> value);
    partial void Onqualified_target_groupsChanged();
    partial void Oncertified_target_groupChanging(System.Nullable<int> value);
    partial void Oncertified_target_groupChanged();
    #endregion
		
		public Employee()
		{
			this._EmployeeDocuments = new EntitySet<EmployeeDocument>(new Action<EmployeeDocument>(this.attach_EmployeeDocuments), new Action<EmployeeDocument>(this.detach_EmployeeDocuments));
			this._TargetGroup = default(EntityRef<TargetGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ssn", DbType="VarChar(9)")]
		public string ssn
		{
			get
			{
				return this._ssn;
			}
			set
			{
				if ((this._ssn != value))
				{
					this.OnssnChanging(value);
					this.SendPropertyChanging();
					this._ssn = value;
					this.SendPropertyChanged("ssn");
					this.OnssnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qualified_target_groups", DbType="Int")]
		public System.Nullable<int> qualified_target_groups
		{
			get
			{
				return this._qualified_target_groups;
			}
			set
			{
				if ((this._qualified_target_groups != value))
				{
					this.Onqualified_target_groupsChanging(value);
					this.SendPropertyChanging();
					this._qualified_target_groups = value;
					this.SendPropertyChanged("qualified_target_groups");
					this.Onqualified_target_groupsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_certified_target_group", DbType="Int")]
		public System.Nullable<int> certified_target_group
		{
			get
			{
				return this._certified_target_group;
			}
			set
			{
				if ((this._certified_target_group != value))
				{
					if (this._TargetGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncertified_target_groupChanging(value);
					this.SendPropertyChanging();
					this._certified_target_group = value;
					this.SendPropertyChanged("certified_target_group");
					this.Oncertified_target_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeDocument", Storage="_EmployeeDocuments", ThisKey="id", OtherKey="employee_id")]
		public EntitySet<EmployeeDocument> EmployeeDocuments
		{
			get
			{
				return this._EmployeeDocuments;
			}
			set
			{
				this._EmployeeDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TargetGroup_Employee", Storage="_TargetGroup", ThisKey="certified_target_group", OtherKey="id", IsForeignKey=true)]
		public TargetGroup TargetGroup
		{
			get
			{
				return this._TargetGroup.Entity;
			}
			set
			{
				TargetGroup previousValue = this._TargetGroup.Entity;
				if (((previousValue != value) 
							|| (this._TargetGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetGroup.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._TargetGroup.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._certified_target_group = value.id;
					}
					else
					{
						this._certified_target_group = default(Nullable<int>);
					}
					this.SendPropertyChanged("TargetGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeDocuments(EmployeeDocument entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeDocuments(EmployeeDocument entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TargetGroups")]
	public partial class TargetGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _targetGroup1;
		
		private int _targetGroupCode;
		
		private string _description;
		
		private string _maxCredit;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntargetGroup1Changing(string value);
    partial void OntargetGroup1Changed();
    partial void OntargetGroupCodeChanging(int value);
    partial void OntargetGroupCodeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnmaxCreditChanging(string value);
    partial void OnmaxCreditChanged();
    #endregion
		
		public TargetGroup()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="targetGroup", Storage="_targetGroup1", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string targetGroup1
		{
			get
			{
				return this._targetGroup1;
			}
			set
			{
				if ((this._targetGroup1 != value))
				{
					this.OntargetGroup1Changing(value);
					this.SendPropertyChanging();
					this._targetGroup1 = value;
					this.SendPropertyChanged("targetGroup1");
					this.OntargetGroup1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_targetGroupCode", DbType="Int NOT NULL")]
		public int targetGroupCode
		{
			get
			{
				return this._targetGroupCode;
			}
			set
			{
				if ((this._targetGroupCode != value))
				{
					this.OntargetGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._targetGroupCode = value;
					this.SendPropertyChanged("targetGroupCode");
					this.OntargetGroupCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxCredit", DbType="VarChar(50)")]
		public string maxCredit
		{
			get
			{
				return this._maxCredit;
			}
			set
			{
				if ((this._maxCredit != value))
				{
					this.OnmaxCreditChanging(value);
					this.SendPropertyChanging();
					this._maxCredit = value;
					this.SendPropertyChanged("maxCredit");
					this.OnmaxCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TargetGroup_Employee", Storage="_Employees", ThisKey="id", OtherKey="certified_target_group")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.TargetGroup = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.TargetGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeDocuments")]
	public partial class EmployeeDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _employee_id;
		
		private int _document_id;
		
		private System.Nullable<System.DateTime> _received_date;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onemployee_idChanging(int value);
    partial void Onemployee_idChanged();
    partial void Ondocument_idChanging(int value);
    partial void Ondocument_idChanged();
    partial void Onreceived_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onreceived_dateChanged();
    #endregion
		
		public EmployeeDocument()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employee_id", DbType="Int NOT NULL")]
		public int employee_id
		{
			get
			{
				return this._employee_id;
			}
			set
			{
				if ((this._employee_id != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemployee_idChanging(value);
					this.SendPropertyChanging();
					this._employee_id = value;
					this.SendPropertyChanged("employee_id");
					this.Onemployee_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_document_id", DbType="Int NOT NULL")]
		public int document_id
		{
			get
			{
				return this._document_id;
			}
			set
			{
				if ((this._document_id != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocument_idChanging(value);
					this.SendPropertyChanging();
					this._document_id = value;
					this.SendPropertyChanged("document_id");
					this.Ondocument_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_received_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> received_date
		{
			get
			{
				return this._received_date;
			}
			set
			{
				if ((this._received_date != value))
				{
					this.Onreceived_dateChanging(value);
					this.SendPropertyChanging();
					this._received_date = value;
					this.SendPropertyChanged("received_date");
					this.Onreceived_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeDocument", Storage="_Employee", ThisKey="employee_id", OtherKey="id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeDocuments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeDocuments.Add(this);
						this._employee_id = value.id;
					}
					else
					{
						this._employee_id = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_EmployeeDocument", Storage="_Document", ThisKey="document_id", OtherKey="id", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.EmployeeDocuments.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.EmployeeDocuments.Add(this);
						this._document_id = value.id;
					}
					else
					{
						this._document_id = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Documents")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _document1;
		
		private int _allowedDays;
		
		private EntitySet<EmployeeDocument> _EmployeeDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondocument1Changing(string value);
    partial void Ondocument1Changed();
    partial void OnallowedDaysChanging(int value);
    partial void OnallowedDaysChanged();
    #endregion
		
		public Document()
		{
			this._EmployeeDocuments = new EntitySet<EmployeeDocument>(new Action<EmployeeDocument>(this.attach_EmployeeDocuments), new Action<EmployeeDocument>(this.detach_EmployeeDocuments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="document", Storage="_document1", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string document1
		{
			get
			{
				return this._document1;
			}
			set
			{
				if ((this._document1 != value))
				{
					this.Ondocument1Changing(value);
					this.SendPropertyChanging();
					this._document1 = value;
					this.SendPropertyChanged("document1");
					this.Ondocument1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allowedDays", DbType="Int NOT NULL")]
		public int allowedDays
		{
			get
			{
				return this._allowedDays;
			}
			set
			{
				if ((this._allowedDays != value))
				{
					this.OnallowedDaysChanging(value);
					this.SendPropertyChanging();
					this._allowedDays = value;
					this.SendPropertyChanged("allowedDays");
					this.OnallowedDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_EmployeeDocument", Storage="_EmployeeDocuments", ThisKey="id", OtherKey="document_id")]
		public EntitySet<EmployeeDocument> EmployeeDocuments
		{
			get
			{
				return this._EmployeeDocuments;
			}
			set
			{
				this._EmployeeDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeDocuments(EmployeeDocument entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_EmployeeDocuments(EmployeeDocument entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}
}
#pragma warning restore 1591
